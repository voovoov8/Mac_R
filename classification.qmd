---
title: "classification"
author: "yoon"
format: html
editor: visual
---

# 0. 이항선택모형

## 0-1. 개념 설명

-   $y$ 가 유한개의 값중 하나를 갖는다

-   limited dependent variable

-   경제활동 참가를 하는지 여부 (1,0), 출산여부 (1,0) , 어떤 교통수단으로 등

-   discrete choice model (이산 선택 모형)

-   binary choice model (이항 선택 모형)

-   경제활동참가 여부 \$ y in  { 0, 1 }\$

    -   관심있는 사건을 1로 놓음

-우리의 관심은 다음에 있음 $$ 
\Pr (y = 1 | x)
$$ - 조건부 확률을 다음과 같이 모형화 한다. - 선형확률 모형 (Linear probability model) - 로짓(logit) 혹은 로지스틱(logistic) 모형

$$ 
\Pr (y = 1 | x) = \beta_0 + \beta_1  \times x
$$

-   LPM 의 경우, 일정 $x$ 의 값에 대하여 1보다 크거나 0보더 작은 경우가 발생할 수 있음

-   1\~0 사이에 확률이 들어올 수 있도록 특정 함수를 이용해서 반환한다.

## 0-2. 로지스틱 함수

```{r}
library(tidyverse)
df <- data.frame(x = seq(-4, 4, 0.1))

df |> 
  mutate(y = 1/(1 + exp(-x))) |> 
  ggplot(aes(x = x, y=y))+ 
  geom_line() + 
  geom_hline(yintercept = c( 0, 1.0), 
             color = "red")
```

-   로지스틱 function의 모습 (sigmoid function)

$$ 
f(x) = \frac{1}{1 + \exp(-x)}
$$ $$
\Pr (y = 1 | x) =G(\beta_0 + \beta_1  \times x)
$$ - 여기에서 $G(\cdot)$ 는 logistic function 임 - logit model (logistic + tobit)

# 1. 새로운 실험

```{r}
rm(list = ls())
library(readr)
par <-read.csv("dataforclass/women_work.csv")

# 메리지 변수를 factor 로 전환 
par$married <-  factor(
  par$married, labels = c("single", "married")
)
str(par)
```

## 1-1. LPM

-   lpm 모형 추정, 회귀모형을 그대로 추정함.

```{r}
bin.lpm<- lm(participation ~ age + education +married + children, 
   data = par)
```

```{r}
par |> 
  mutate(pr.lpm = predict(bin.lpm)) |>
  ggplot(aes(x = age, y = pr.lpm)) + 
  geom_point(size = 2, alpha = 0.3) + 
  geom_hline(yintercept = c(0, 1.0)) + 
  labs( x = "나이", 
        y = "LPM 예측 확률")

```

-\> 확인한것과 같이 1 을 넘어가는 확률이 발생하게 된다.

## 1-2. Logit Model

-   logit 모형/ logistic regression 모형을 추정
-   generalized linear model, glm() 함수 활용

```{r}
 bin.logit <- glm(participation ~ age + education + married + children, data = par, family = "binomial") # glm(일반화 선형 모델)을 만든다. 
```

-\> family = "binomial" 과정을 통해 로지스틱 회귀를 지정한다. 따라서 이진결과를 모델링.

-   예측치를 만들어서 연령과 경제활동 참가 확률 예측치를 시각화

```{r}
par |> 
  mutate(pr.logit = predict(bin.logit, type = "response")) |> 
  # response type 으로 지정해서 확률값으로 반환 
  ggplot(aes(x = age, y = pr.logit)) + 
  geom_point(size = 2, alpha = 0.3) + 
  geom_hline(yintercept = c(0, 1.0))
```

### 새로운 데이터로 예측 실험

```{r}
library(caret)
library(titanic)

```

-   data 로딩

```{r}
data <- titanic::titanic_train
str(data)
```

```{r}
df  <- data[, -c(1, 4, 9, 11)]

head(df)
df$Survived  <- factor(df$Survived,
                          levels = c(0,1),
                          labels = c("died", "sirvived"))

table(df$Survived)
```

```{r}
df$Age[is.na(df$Age)] <- median(df$Age, na.rm= TRUE)

df$Embarked[is.na(df$Embarked)] <- "S"
```

```{r}
set.seed(123456)
train_index <-createDataPartition(df$Survived, 
                                  p = 0.7, 
                                  list = FALSE)

train_df <- df[train_index,]
test_df <- df[-train_index,]
```

```{r}
model <- glm(Survived ~., data = train_df,
             family = "binomial")

summary(model)
```

```{r}
prob.pred <- predict(model, 
                      newdata = test_df,
                      type = "response")

head(prob.pred)
```

-   예측확률을 기준으로 \> 0.5 **생존**, \<0.5 **사망**

```{r}
prediction <- ifelse(prob.pred > 0.5, "survived", "died")
prediction <- factor(prediction, levels = c("died", "survived"))
head(prediction)
```

-   TP, TF, FP, FT 그리는 confusion matrix 을 그리기

```{r}
confusion_mat <- table(predicted = prediction,
                          actual = test_df$Survived)
print(confusion_mat)
```

-   정확도 (accuracy) = (TP +TF)/ 전체

```{r}
confusion_mat_df <- as.data.frame(as.table(confusion_mat))
colnames(confusion_mat_df) <- c("predicted",
                                "actual",
                                "count")

confusion_mat_df |> 
  ggplot(aes(x = actual, y = predicted, fill = count)) + 
  geom_tile() + 
  geom_text(aes(label = count), color = "black", size = 5) +
  scale_fill_gradient(low= "white", high = "blue")
  labs(x = "Actual", y  = "Predicted") 
```

### 정확도(Acurracy)

```{r}
str(confusion_mat_df)
# confusion_mat_df 데이터프레임 사용
confusion_matrix <- table(Predicted = confusion_mat_df$predicted, 
                          Actual = confusion_mat_df$actual)

# 정확도 계산
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)

# 정확도 출력
print(paste('정확도:', round(accuracy, 4)))
```

### 정밀도 (Precision)

-   precision = TP / (predicted to be positive)

```{r}
# precision 
confusion_mat
precision <-  confusion_mat[2,2]/ sum(confusion_mat[2,]) 
print(precision)
```

### 리콜(Recall)

-   만약 무기를 집고 있는 애들을 공항에서 잡아낼려면, 실제 중에서 얼마나 많은 애들을 걸러내는냐가 목적함수

-   recall = TP/ Actual positive

-   actuall positive = TP + FN

    ```{r}
     recall <-confusion_mat[2,2]/ sum(confusion_mat[,2])
     print(recall)
    ```

    ```{r}
    performance <-  data.frame(
      metric = c("accuracy", "precision", "recall"),
      value = c(accuracy, precision, recall)
    )

    performance |> 
      ggplot(aes(x = metric, y = value, fill = metric))+ 
      geom_bar(stat = "identity") + 
      geom_text(aes(label = round(value,3)), vjust = -0.5) 
    ```